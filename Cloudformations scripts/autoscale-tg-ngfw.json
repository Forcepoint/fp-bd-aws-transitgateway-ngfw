{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "UserData": {
            "Default": "",
            "Type": "String"
        },
        "BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "Default": "bd-tg-ngfw",
            "Type": "String"
        },
        "KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "Default": "Lambda-Functions/",
            "Type": "String"
        }
    },
    "Resources": {
        "LambdaZipsBucket": {
            "Type": "AWS::S3::Bucket",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c00ff796-53ab-4b23-90c2-9be1cc5f9b46"
                }
            }
        },
        "CopyZips": {
            "Type": "Custom::CopyZips",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CopyZipsFunction",
                        "Arn"
                    ]
                },
                "DestBucket": {
                    "Ref": "LambdaZipsBucket"
                },
                "SourceBucket": {
                    "Ref": "BucketName"
                },
                "Prefix": {
                    "Ref": "KeyPrefix"
                },
                "Objects": [
                    "config-smc/myDeploymentPackage.zip"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2e51dfad-3c0c-4bf0-b328-beec2308b9bc"
                }
            }
        },
        "CopyZipsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "lambdaCopier",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${BucketName}/${KeyPrefix}*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${LambdaZipsBucket}/${KeyPrefix}*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c70d25f9-ca91-441a-9d3e-a15b87024362"
                }
            }
        },
        "CopyZipsFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Copies objects from a source S3 bucket to a destination",
                "Handler": "index.handler",
                "Runtime": "python3.8",
                "Role": {
                    "Fn::GetAtt": [
                        "CopyZipsRole",
                        "Arn"
                    ]
                },
                "Timeout": 240,
                "Code": {
                    "ZipFile": "import json\nimport logging\nimport threading\nimport boto3\nimport cfnresponse\ndef copy_objects(source_bucket, dest_bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    for o in objects:\n        key = prefix + o\n        copy_source = {\n            'Bucket': source_bucket,\n            'Key': key\n        }\n        print('copy_source: %s' % copy_source)\n        print('dest_bucket = %s'%dest_bucket)\n        print('key = %s' %key)\n        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,\n              Key=key)\ndef delete_objects(bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    objects = {'Objects': [{'Key': prefix + o} for o in objects]}\n    s3.delete_objects(Bucket=bucket, Delete=objects)\ndef timeout(event, context):\n    logging.error('Execution is about to time out, sending failure response to CloudFormation')\n    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)\ndef handler(event, context):\n    # make sure we send a failure to CloudFormation if the function\n    # is going to timeout\n    timer = threading.Timer((context.get_remaining_time_in_millis()\n              / 1000.00) - 0.5, timeout, args=[event, context])\n    timer.start()\n    print('Received event: %s' % json.dumps(event))\n    status = cfnresponse.SUCCESS\n    try:\n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        prefix = event['ResourceProperties']['Prefix']\n        objects = event['ResourceProperties']['Objects']\n        if event['RequestType'] == 'Delete':\n            delete_objects(dest_bucket, prefix, objects)\n        else:\n            copy_objects(source_bucket, dest_bucket, prefix, objects)\n    except Exception as e:\n        logging.error('Exception: %s' % e, exc_info=True)\n        status = cfnresponse.FAILED\n    finally:\n        timer.cancel()\n        cfnresponse.send(event, context, status, {}, None)\n"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "91a284cd-21c6-4c8a-8276-b7f60fe508ee"
                }
            }
        },
        "MyFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cc93df03-27dd-4198-bcaf-c475e01ee45f"
                }
            }
        },
        "SMCConfig": {
            "DependsOn": [
                "CopyZips"
            ],
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Smc Configuration",
                "Environment": {
                    "Variables": {
                        "engine_name": "",
                        "private_ip": "",
                        "public_ip": ""
                    }
                },
                "Handler": "lambda_function.lambda_handler",
                "Runtime": "python3.8",
                "Role": {
                    "Fn::GetAtt": [
                        "MyFunctionRole",
                        "Arn"
                    ]
                },
                "Timeout": 600,
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaZipsBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${KeyPrefix}config-smc/myDeploymentPackage.zip"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "70bdbf61-df10-4c76-893a-c33be8559753"
                }
            }
        },
        "vpc0b40973e5aa01818f": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "100.64.0.0/16",
                "InstanceTenancy": "default",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "false",
                "Tags": [
                    {
                        "Key": "scenario",
                        "Value": "test-tgw"
                    },
                    {
                        "Key": "env",
                        "Value": "ngfw"
                    },
                    {
                        "Key": "Name",
                        "Value": "test-tgw-vpc-ngfw"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3a281c01-3c93-4b98-80cf-602ca23d62b2"
                }
            }
        },
        "ngfwSubnet1a": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "100.64.0.0/24",
                "AvailabilityZone": "ap-south-1a",
                "VpcId": {
                    "Ref": "vpc0b40973e5aa01818f"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "test-tgw-vpc-ngfw-sub-a"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ece6f4d3-51a3-49eb-b301-70e93f665d6f"
                }
            }
        },
        "igw07c6801e226af5391": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "scenario",
                        "Value": "test-tgw"
                    },
                    {
                        "Key": "Name",
                        "Value": "test-tgw-vpc-ngfw-igw"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "594f869d-1b42-41e4-888a-87cbcc8f4fdd"
                }
            }
        },
        "rtb02920164a5604bd6e": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "vpc0b40973e5aa01818f"
                },
                "Tags": [
                    {
                        "Key": "env",
                        "Value": "ngfw"
                    },
                    {
                        "Key": "scenario",
                        "Value": "test-tgw"
                    },
                    {
                        "Key": "Name",
                        "Value": "test-tgw-vpc-ngfw-rtb"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "307c0cda-4fbb-4a87-b88b-6d8a31051f33"
                }
            }
        },
        "sgallowall": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow all",
                "VpcId": {
                    "Ref": "vpc0b40973e5aa01818f"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": 0,
                        "ToPort": 0,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": 0,
                        "ToPort": 0,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "test-tgw-vpc-ngfw-security-group-allow-all"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d16a6c0a-e6ec-4c90-8997-dde94cbacdfb"
                }
            }
        },
        "gw2": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "vpc0b40973e5aa01818f"
                },
                "InternetGatewayId": {
                    "Ref": "igw07c6801e226af5391"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0cc159b3-0d2c-470e-b6a6-ccc5a220d4e0"
                }
            }
        },
        "route4": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "10.0.0.0/8",
                "TransitGatewayId": {
                    "Ref": "EC2TG3SC28"
                },
                "RouteTableId": {
                    "Ref": "rtb02920164a5604bd6e"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0eb8054a-4e91-4839-9808-08b9e1b81194"
                }
            },
            "DependsOn": [
                "EC2TGA52Z3K"
            ]
        },
        "ingress1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgallowall"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress1": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgallowall"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EC2TG3SC28": {
            "Type": "AWS::EC2::TransitGateway",
            "Properties": {
                "Description": "Transit Gateway testing scenario with 4 VPCs, 2 subnets each",
                "DefaultRouteTableAssociation": "disable",
                "DefaultRouteTablePropagation": "disable",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "test-tgw"
                    },
                    {
                        "Key": "scenario",
                        "Value": "test-tgw"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0f4e59c1-565e-41d4-b2ff-2c030c4197c5"
                }
            }
        },
        "EC2TGRTD6ZD": {
            "Type": "AWS::EC2::TransitGatewayRouteTable",
            "Properties": {
                "TransitGatewayId": {
                    "Ref": "EC2TG3SC28"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "tgw-protected-vpc-rt"
                    },
                    {
                        "Key": "scenario",
                        "Value": "test-tgw"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a20facd2-908d-4519-abc9-8b17d55cd5b6"
                }
            },
            "DependsOn": [
                "EC2TG3SC28"
            ]
        },
        "EC2TGA52Z3K": {
            "Type": "AWS::EC2::TransitGatewayAttachment",
            "Properties": {
                "SubnetIds": [
                    {
                        "Ref": "ngfwSubnet1a"
                    },
                    {
                        "Ref": "ngfwSubnet1b"
                    },
                    {
                        "Ref": "ngfwSubnet1c"
                    }
                ],
                "TransitGatewayId": {
                    "Ref": "EC2TG3SC28"
                },
                "VpcId": {
                    "Ref": "vpc0b40973e5aa01818f"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "test-tgw-att-ngfw"
                    },
                    {
                        "Key": "scenario",
                        "Value": "test-tgw"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "164489cf-18bf-42b8-99af-69982958cbf9"
                }
            },
            "DependsOn": [
                "vpc0b40973e5aa01818f",
                "ngfwSubnet1a"
            ]
        },
        "EC2TGRT2J3GE": {
            "Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
            "Properties": {
                "TransitGatewayAttachmentId": {
                    "Ref": "EC2TGA52Z3K"
                },
                "TransitGatewayRouteTableId": {
                    "Ref": "EC2TGRTD6ZD"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f62b7971-0417-4e8b-903b-189f69d6e23b"
                }
            }
        },
        "EC2TGRT42RDJ": {
            "Type": "AWS::EC2::TransitGatewayRouteTablePropagation",
            "Properties": {
                "TransitGatewayAttachmentId": {
                    "Ref": "EC2TGA52Z3K"
                },
                "TransitGatewayRouteTableId": {
                    "Ref": "EC2TGRTD6ZD"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "997287ad-7711-4fd1-861e-c0c25afc43f1"
                }
            }
        },
        "EC2R2KI6O": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "rtb02920164a5604bd6e"
                },
                "GatewayId": {
                    "Ref": "igw07c6801e226af5391"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7464db25-1c16-4e56-9d41-22105be12b94"
                }
            }
        },
        "RouteTableAssociationa": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "ngfwSubnet1a"
                },
                "RouteTableId": {
                    "Ref": "rtb02920164a5604bd6e"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ea724200-79db-4c6c-b257-1867c1686afe"
                }
            }
        },
        "ngfwSubnet1b": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "100.64.1.0/24",
                "AvailabilityZone": "ap-south-1b",
                "VpcId": {
                    "Ref": "vpc0b40973e5aa01818f"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "test-tgw-vpc-ngfw-sub-b"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cb8844c7-6254-4c59-a68e-cc97db03ed0e"
                }
            }
        },
        "ngfwSubnet1c": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "100.64.2.0/24",
                "AvailabilityZone": "ap-south-1c",
                "VpcId": {
                    "Ref": "vpc0b40973e5aa01818f"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "test-tgw-vpc-ngfw-sub-c"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "196529dd-21cc-4461-b74e-f448194104cc"
                }
            }
        },
        "NGFWAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "NGFWLaunchTemplate"
                    },
                    "Version": "1"
                },
                "AvailabilityZones": [
                    "ap-south-1a",
                    "ap-south-1b",
                    "ap-south-1c"
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "ngfwSubnet1a"
                    },
                    {
                        "Ref": "ngfwSubnet1b"
                    },
                    {
                        "Ref": "ngfwSubnet1c"
                    }
                ],
                "MinSize": "0",
                "MaxSize": "3",
                "DesiredCapacity": "0"
            },
            "DependsOn": [
                "gw2",
                "ngfwSubnet1b",
                "ngfwSubnet1c",
                "ngfwSubnet1a"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2499e4ae-8e73-4e35-b14c-a378a334d557"
                }
            }
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "SMCConfig"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ER1709N",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "30e4b3de-de2b-48c9-85c5-705247b0f216"
                }
            },
            "DependsOn": [
                "SMCConfig"
            ]
        },
        "ER1709N": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "source": [
                        "aws.autoscaling"
                    ],
                    "detail-type": [
                        "EC2 Instance-launch Lifecycle Action",
                        "EC2 Instance-terminate Lifecycle Action"
                    ],
                    "detail": {
                        "AutoScalingGroupName": [
                            {
                                "Ref": "NGFWAutoscalingGroup"
                            }
                        ]
                    }
                },
                "Name": "LogAutoScalingEventRule",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "SMCConfig",
                                "Arn"
                            ]
                        },
                        "Id": "StartLambdav1"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fded14ae-d89c-439e-9cbe-4ae22e631cbc"
                }
            },
            "DependsOn": [
                "NGFWAutoscalingGroup"
            ]
        },
        "spinUpEngines": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "NGFWAutoscalingGroup"
                },
                "DefaultResult": "CONTINUE",
                "HeartbeatTimeout": 300,
                "LifecycleHookName": "spinUpEngines",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "717904c3-f3f7-488a-a987-d3d6a2c13257"
                }
            },
            "DependsOn": [
                "NGFWAutoscalingGroup"
            ]
        },

        "NGFWLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateData": {
                    "DisableApiTermination": "false",
                    "ImageId": "ami-005202a99c799e86d",
                    "InstanceType": "c5.xlarge",
                    "KeyName": "ngfw-tgw-keypair",
                    "UserData": {
                        "Fn::Base64": {
                            "Ref": "UserData"
                        }
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fe83810b-ad85-4336-8fc6-3c2c2bb63e4e"
                }
            },
            "DependsOn": [
                "ngfwSubnet1a",
                "ngfwSubnet1c",
                "ngfwSubnet1b"
            ]
        },
        "RouteTableAssociationb": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "rtb02920164a5604bd6e"
                },
                "SubnetId": {
                    "Ref": "ngfwSubnet1b"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3cbf281d-ebbf-4e81-9085-7df243cf92cf"
                }
            }
        },
        "RouteTableAssociationc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "rtb02920164a5604bd6e"
                },
                "SubnetId": {
                    "Ref": "ngfwSubnet1c"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fb005283-4371-4c1e-975c-147fbb4f9bb3"
                }
            }
        },
        "spinDownEngines": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "NGFWAutoscalingGroup"
                },
                "DefaultResult": "CONTINUE",
                "HeartbeatTimeout": 300,
                "LifecycleHookName": "spinDownEngines",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9dca1d3f-28f4-4905-b94a-ea8b8775575b"
                }
            },
            "DependsOn": [
                "NGFWAutoscalingGroup"
            ]
        }
    },
    "Description": "NGFW transit gateway"
}
